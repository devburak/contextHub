#!/usr/bin/env node

import { NodeSSH } from 'node-ssh';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { readFileSync, existsSync } from 'fs';
import * as dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const rootDir = join(__dirname, '..');

// .env dosyasƒ±nƒ± y√ºkle
const envPath = join(rootDir, '.env');
if (!existsSync(envPath)) {
  console.error('‚ùå .env dosyasƒ± bulunamadƒ±!');
  process.exit(1);
}

dotenv.config({ path: envPath });

// Deploy ayarlarƒ±nƒ± kontrol et
const config = {
  host: process.env.adminDeployServer,
  username: process.env.adminUser,
  password: process.env.adminPassword,
  remotePath: process.env.adminDeployPath,
  localPath: join(rootDir, 'apps/admin/dist')
};

// Gerekli deƒüi≈ükenleri kontrol et
const missingVars = [];
if (!config.host) missingVars.push('adminDeployServer');
if (!config.username) missingVars.push('adminUser');
if (!config.password) missingVars.push('adminPassword');
if (!config.remotePath) missingVars.push('adminDeployPath');

if (missingVars.length > 0) {
  console.error('‚ùå .env dosyasƒ±nda eksik deƒüi≈ükenler:', missingVars.join(', '));
  process.exit(1);
}

// Build klas√∂r√ºn√ºn varlƒ±ƒüƒ±nƒ± kontrol et
if (!existsSync(config.localPath)) {
  console.error('‚ùå Build klas√∂r√º bulunamadƒ±:', config.localPath);
  console.error('üí° √ñnce "pnpm build:admin" komutunu √ßalƒ±≈ütƒ±rƒ±n.');
  process.exit(1);
}

console.log('üöÄ Admin Panel Deploy Ba≈ülatƒ±lƒ±yor...\n');
console.log('üì¶ Kaynak:', config.localPath);
console.log('üåê Hedef:', `${config.username}@${config.host}:${config.remotePath}\n`);

const ssh = new NodeSSH();

async function deploy() {
  try {
    // SSH baƒülantƒ±sƒ± kur
    console.log('üîê SSH baƒülantƒ±sƒ± kuruluyor...');
    await ssh.connect({
      host: config.host,
      username: config.username,
      password: config.password,
      port: 22,
      tryKeyboard: true
    });
    console.log('‚úÖ SSH baƒülantƒ±sƒ± ba≈üarƒ±lƒ±!\n');

    // Hedef dizini olu≈ütur (yoksa)
    console.log('üìÅ Hedef dizin kontrol ediliyor...');
    await ssh.execCommand(`mkdir -p ${config.remotePath}`);
    console.log('‚úÖ Hedef dizin hazƒ±r\n');

    // Mevcut dosyalarƒ± yedekle (opsiyonel)
    const backupDir = `${config.remotePath}.backup-${Date.now()}`;
    console.log('üíæ Mevcut dosyalar yedekleniyor...');
    const backupResult = await ssh.execCommand(
      `if [ -d "${config.remotePath}" ] && [ "$(ls -A ${config.remotePath})" ]; then cp -r ${config.remotePath} ${backupDir}; echo "Yedeklendi"; else echo "Yedeklenecek dosya yok"; fi`
    );
    console.log('‚úÖ', backupResult.stdout || 'Yedekleme tamamlandƒ±\n');

    // Dist klas√∂r√ºn√º sunucuya y√ºkle
    console.log('üì§ Dosyalar y√ºkleniyor...');
    console.log('‚è≥ Bu i≈ülem birka√ß dakika s√ºrebilir...\n');
    
    const uploadResult = await ssh.putDirectory(config.localPath, config.remotePath, {
      recursive: true,
      concurrency: 10,
      validate: (itemPath) => {
        const baseName = itemPath.split('/').pop();
        // .DS_Store gibi gereksiz dosyalarƒ± atla
        return baseName !== '.DS_Store' && !baseName.startsWith('.');
      },
      tick: (localPath, remotePath, error) => {
        if (error) {
          console.error('‚ùå', localPath, error);
        } else {
          // Her 10 dosyada bir nokta g√∂ster (√ßok fazla log'u √∂nlemek i√ßin)
          if (Math.random() < 0.1) {
            process.stdout.write('.');
          }
        }
      }
    });

    console.log('\n');
    
    if (uploadResult) {
      console.log('‚úÖ T√ºm dosyalar ba≈üarƒ±yla y√ºklendi!\n');
      
      // Dosya sayƒ±sƒ±nƒ± kontrol et
      const countResult = await ssh.execCommand(`find ${config.remotePath} -type f | wc -l`);
      console.log('üìä Y√ºklenen dosya sayƒ±sƒ±:', countResult.stdout.trim());
      
      // Dosya izinlerini ayarla
      console.log('\nüîí Dosya izinleri ayarlanƒ±yor...');
      await ssh.execCommand(`chmod -R 755 ${config.remotePath}`);
      console.log('‚úÖ ƒ∞zinler ayarlandƒ±\n');
      
      console.log('üéâ Deploy ba≈üarƒ±yla tamamlandƒ±!');
      console.log(`üåç Site: https://${config.host.replace('cp1.', 'www.')}/`);
      
      // Eski yedekleri temizle (30 g√ºnden eski)
      console.log('\nüßπ Eski yedekler temizleniyor...');
      await ssh.execCommand(`find $(dirname ${config.remotePath}) -name "$(basename ${config.remotePath}).backup-*" -mtime +30 -exec rm -rf {} \\;`);
      console.log('‚úÖ Temizleme tamamlandƒ±');
      
    } else {
      console.error('‚ùå Dosya y√ºkleme ba≈üarƒ±sƒ±z!');
      process.exit(1);
    }

  } catch (error) {
    console.error('\n‚ùå Deploy sƒ±rasƒ±nda hata olu≈ütu:', error.message);
    if (error.code === 'ENOTFOUND') {
      console.error('üí° Sunucu adresini kontrol edin:', config.host);
    } else if (error.level === 'client-authentication') {
      console.error('üí° Kullanƒ±cƒ± adƒ± veya ≈üifre hatalƒ± olabilir');
    }
    process.exit(1);
  } finally {
    ssh.dispose();
  }
}

// Deploy'u ba≈ülat
deploy();
