const { database } = require('@contexthub/common');
const FeatureFlagDefinition = require('@contexthub/common/src/models/FeatureFlagDefinition');
const dotenv = require('dotenv');
const path = require('path');

// Load environment variables
dotenv.config({ path: path.resolve(__dirname, '../../../../.env') });

const featureFlags = [
  {
    key: 'limitShow',
    label: 'Limit ve Kullanƒ±m G√∂sterimi',
    description: 'Dashboard\'da "Limit & Kullanƒ±m" b√∂l√ºm√ºn√º g√∂sterir. Depolama, API √ßaƒürƒ±larƒ±, kullanƒ±cƒ± limitleri ve aktif plan bilgilerini i√ßerir.',
    defaultEnabled: false,
    notes: 'Subscription plan sistemi aktif olduƒüunda a√ßƒ±lmalƒ±dƒ±r.'
  },
  {
    key: 'statisticShow',
    label: 'ƒ∞statistikler G√∂sterimi',
    description: 'Dashboard\'da "ƒ∞statistikler" b√∂l√ºm√ºn√º g√∂sterir. Toplam kullanƒ±cƒ±, i√ßerik, medya dosyalarƒ± ve API √ßaƒürƒ±larƒ± istatistiklerini i√ßerir.',
    defaultEnabled: false,
    notes: 'Genel bakƒ±≈ü i√ßin kullanƒ±lƒ±r, performans endi≈üesi varsa kapatƒ±labilir.'
  },
  {
    key: 'contentScheduling',
    label: 'ƒ∞√ßerik Zamanlama',
    description: 'ƒ∞√ßeriklerin belirli bir tarih ve saatte yayƒ±nlanmasƒ±nƒ± saƒülar. "scheduled" durumunu aktif eder.',
    defaultEnabled: false,
    notes: 'ƒ∞√ßerik edit√∂rde zamanlama se√ßeneklerini g√∂sterir.'
  }
];

async function seedFeatureFlags() {
  try {
    console.log('üîó Connecting to database...');
    await database.connectDB();
    console.log('‚úÖ Connected to database\n');

    console.log('üö© Seeding feature flag definitions...\n');

    for (const flag of featureFlags) {
      const existing = await FeatureFlagDefinition.findOne({ key: flag.key });
      
      if (existing) {
        // Update existing flag
        await FeatureFlagDefinition.updateOne(
          { key: flag.key },
          { $set: flag }
        );
        console.log(`   ‚úì Updated: ${flag.key} - ${flag.label}`);
      } else {
        // Create new flag
        await FeatureFlagDefinition.create(flag);
        console.log(`   ‚úì Created: ${flag.key} - ${flag.label}`);
      }
    }

    console.log(`\n‚úÖ Successfully seeded ${featureFlags.length} feature flags!`);
    console.log('\nüìù Feature Flags:');
    featureFlags.forEach(flag => {
      console.log(`   ‚Ä¢ ${flag.key}: ${flag.label}`);
      console.log(`     Default: ${flag.defaultEnabled ? 'Enabled' : 'Disabled'}`);
      console.log(`     ${flag.description}`);
      console.log('');
    });

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error seeding feature flags:', error);
    process.exit(1);
  }
}

seedFeatureFlags();
